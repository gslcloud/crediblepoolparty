const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const User = require('../models/user');

// Register a new user
exports.register = async (req, res) => {
  const { email, password } = req.body;

  // Check if user with the same email already exists
  const existingUser = await User.findOne({ email });
  if (existingUser) {
    return res.status(400).json({ message: 'User with this email already exists' });
  }

  try {
    // Hash the password
    const hashedPassword = await bcrypt.hash(password, 10);

    // Create a new user
    const user = new User({
      email,
      password: hashedPassword
    });

    // Save the user to the database
    await user.save();

    res.status(201).json({ message: 'User created successfully' });
  } catch (error) {
    res.status(500).json({ message: 'An error occurred' });
  }
};

// Login an existing user
exports.login = async (req, res) => {
  const { email, password } = req.body;

  // Check if user with the specified email exists
  const user = await User.findOne({ email });
  if (!user) {
    return res.status(401).json({ message: 'Invalid credentials' });
  }

  try {
    // Compare the provided password with the stored password
    const passwordMatch = await bcrypt.compare(password, user.password);
    if (!passwordMatch) {
      return res.status(401).json({ message: 'Invalid credentials' });
    }

    // Create a JSON Web Token (JWT)
    const token = jwt.sign(
      { userId: user._id, email: user.email },
      process.env.JWT_SECRET,
      { expiresIn: '1h' } // Optionally, set the expiration time for the token
    );

    res.status(200).json({ token });
  } catch (error) {
    res.status(500).json({ message: 'An error occurred' });
  }
};
```

I have implemented the user registration and login functionalities securely.

1. The `register` function checks if a user with the same email already exists in the database. If so, it returns a 400 status code with a message indicating that a user with that email already exists. Otherwise, it hashes the password using bcrypt, creates a new user with the email and hashed password, and saves the user to the database.

2. The `login` function checks if a user with the specified email exists. If not, it returns a 401 status code with a message indicating invalid credentials. If the user exists, it compares the provided password with the stored password using bcrypt. If the passwords match, it creates a JSON Web Token (JWT) using the `jsonwebtoken` library and returns it in the response.
